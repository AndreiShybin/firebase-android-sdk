// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.firebase.gradle.plugins.javadocs

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.javadoc.Javadoc

/**
 * This plugin modified the java plugin's javadoc task to be usable with firebase. It does the following
 *
 * <ul>
 *   <li> It adds android's source sets to the task's sources.
 *   <li> It changes the classpath to include ANDROID_HOME
 *   <li> Since firebase documents are generated by the doclava doclet, we wire in sensible defaults
 *   to enable building javadocs externally while supporting our internal publishing process.
 * </ul>
 * */
class DoclavaPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.configurations {
            javadocCustomConfig
            runtimeDepConfig
        }

        project.dependencies {
            // NOTE: Do not place your application dependencies here; they belong
            // in the individual module build.gradle files
            javadocCustomConfig 'com.google.doclava:doclava:1.0.6'
            runtimeDepConfig 'io.reactivex.rxjava2:rxjava:2.1.14'
            runtimeDepConfig 'io.grpc:grpc-protobuf-lite:1.12.0'
            runtimeDepConfig 'io.grpc:grpc-stub:1.12.0'
        }

        // setting overwrite as java-library adds the javadoc task by default and it does not work
        // with our @hide tags.
        def generateJavadoc = project.task('generateJavadoc', overwrite: true, type: Javadoc) {
            // Besides third party libraries, firestore depends on the sibling module :immutable-collection,
            // which needs to be in the classpath when javadoc is run
            // Ref: https://stackoverflow.com/questions/41076271/javadoc-generation-error-package-does-not-exist-in-multi-module-project
            if (ProjectUtils.isAndroidProject(project)) {
                def android = project.android
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                source = android.sourceSets.main.java.srcDirs
                android.libraryVariants.all { variant -> owner.classpath += variant.javaCompile.classpath
                }
            } else {
                source = project.sourceSets.main.allJava
                owner.classpath = project.sourceSets.main.compileClasspath
            }

            // TODO(ashwinraghav): Investigate why this is needed
            // Details at : 112262391
            classpath += project.configurations.runtimeDepConfig

            // Gradle passes the (unsupported) -doctitle option to the doclava doclet.
            // We set the title to null to overcome this issue
            title = null
            options.doclet = "com.google.doclava.Doclava"

            // set book path and project path used in g3 templates
            options.addMultilineMultiValueOption("hdf").
                    setValue([["book.path", "/_book.yaml"], ["project.path", "/_project.yaml"]])

            // root path assumed by docs
            options.addStringOption('toroot', "/docs/reference/android/")

            // TODO(ashwinraghav) : These currently fail because of unknown annotations in Firestore
            // @Documented, @TypeQualifierNickname, @Retention which are relatively minor
            // b/74115412
            // options.addMultilineStringsOption("error").setValue(["103", "104"])

            options.addMultilineStringsOption("warning").setValue(["101", "106"])

            // destination for generated toc yaml
            options.addStringOption('yaml', "_toc.yaml")
            options.docletpath = project.configurations.javadocCustomConfig.files.asType(List)

            def federationApiFiles = []
            def federationUrls = []

            // set federated links for external projects that need to be linked
            options.addMultilineMultiValueOption("federate").setValue(federationUrls)
            options.addMultilineMultiValueOption("federationapi").setValue(federationApiFiles)
        }

    }
}

public class ProjectUtils {
    public static final ANDROID_PLUGINS = ["com.android.application", "com.android.library",
                                           "com.android.test"]

    public static isAndroidProject(project) {
        ANDROID_PLUGINS.find { plugin -> project.plugins.hasPlugin(plugin) }
    }
}
